/// <reference types="react" />
import * as connectJs from "@stripe/connect-js";
import { LoadError, LoaderStart, NotificationCount, StepChange, PaymentsListDefaultFilters, ConnectElementTagName, ConnectHTMLElementRecord } from "@stripe/connect-js";
type FetchEphemeralKeyFunction = (fetchParams: {
    issuingCard: string;
    nonce: string;
}) => Promise<{
    issuingCard: string;
    nonce: string;
    ephemeralKeySecret: string;
}>;
type CommonComponentProps = {
    onLoaderStart?: ({ elementTagName }: LoaderStart) => void;
    onLoadError?: ({ error, elementTagName }: LoadError) => void;
};
declare const ConnectPayments: ({ defaultFilters, onLoadError, onLoaderStart }: {
    defaultFilters?: PaymentsListDefaultFilters | undefined;
} & CommonComponentProps) => JSX.Element;
declare const ConnectPayouts: ({ onLoadError, onLoaderStart }: CommonComponentProps) => JSX.Element;
declare const ConnectPaymentDetails: ({ payment, onClose, onLoadError, onLoaderStart }: {
    payment: string;
    onClose: () => void;
} & CommonComponentProps) => JSX.Element | null;
declare const ConnectPaymentDisputes: ({ payment, onDisputesLoaded, onLoadError, onLoaderStart }: {
    payment: string;
    onDisputesLoaded?: (({ total }: {
        total: number;
    }) => void) | undefined;
} & CommonComponentProps) => JSX.Element | null;
declare const ConnectDisputesList: ({ onLoadError, onLoaderStart }: CommonComponentProps) => JSX.Element | null;
type CollectionOptions = {
    fields: "currently_due" | "eventually_due";
    futureRequirements?: "omit" | "include";
};
declare const ConnectAccountOnboarding: ({ onExit, recipientTermsOfServiceUrl, fullTermsOfServiceUrl, privacyPolicyUrl, skipTermsOfServiceCollection, collectionOptions, onLoadError, onLoaderStart, onStepChange }: {
    onExit: () => void;
    onStepChange?: ((stepChange: StepChange) => void) | undefined;
    recipientTermsOfServiceUrl?: string | undefined;
    fullTermsOfServiceUrl?: string | undefined;
    privacyPolicyUrl?: string | undefined;
    skipTermsOfServiceCollection?: boolean | undefined;
    collectionOptions?: CollectionOptions | undefined;
} & CommonComponentProps) => JSX.Element | null;
declare const ConnectAccountManagement: ({ collectionOptions, onLoadError, onLoaderStart }: {
    collectionOptions?: CollectionOptions | undefined;
} & CommonComponentProps) => JSX.Element | null;
declare const ConnectNotificationBanner: ({ collectionOptions, onNotificationsChange, onLoadError, onLoaderStart }: {
    collectionOptions?: CollectionOptions | undefined;
    onNotificationsChange?: (({ total, actionRequired }: NotificationCount) => void) | undefined;
} & CommonComponentProps) => JSX.Element | null;
declare const ConnectIssuingCard: ({ defaultCard, cardSwitching, showSpendControls, fetchEphemeralKey, onLoadError, onLoaderStart }: {
    defaultCard?: string | undefined;
    cardSwitching?: boolean | undefined;
    showSpendControls?: boolean | undefined;
    fetchEphemeralKey?: FetchEphemeralKeyFunction | undefined;
} & CommonComponentProps) => JSX.Element;
declare const ConnectIssuingCardsList: ({ showSpendControls, issuingProgram, fetchEphemeralKey, onLoadError, onLoaderStart }: {
    showSpendControls?: boolean | undefined;
    issuingProgram?: string | undefined;
    fetchEphemeralKey?: FetchEphemeralKeyFunction | undefined;
} & CommonComponentProps) => JSX.Element;
declare const ConnectFinancialAccount: ({ financialAccount, onLoadError, onLoaderStart }: {
    financialAccount: string;
} & CommonComponentProps) => JSX.Element;
declare const ConnectFinancialAccountTransactions: ({ financialAccount, onLoadError, onLoaderStart }: {
    financialAccount: string;
} & CommonComponentProps) => JSX.Element;
declare const ConnectDocuments: ({ onLoadError, onLoaderStart }: CommonComponentProps) => JSX.Element;
declare const ConnectPayoutsList: ({ onLoadError, onLoaderStart }: CommonComponentProps) => JSX.Element;
declare const ConnectBalances: ({ onLoadError, onLoaderStart }: CommonComponentProps) => JSX.Element;
declare const ConnectTaxRegistrations: ({ onLoadError, onLoaderStart, displayCountries, onAfterTaxRegistrationAdded }: {
    displayCountries?: string[] | undefined;
    onAfterTaxRegistrationAdded?: (({ id }: {
        id: string;
    }) => void) | undefined;
} & CommonComponentProps) => JSX.Element;
declare const ConnectTaxSettings: ({ onLoadError, onLoaderStart, hideProductTaxCodeSelector, displayHeadOfficeCountries, onTaxSettingsUpdated }: {
    hideProductTaxCodeSelector?: boolean | undefined;
    displayHeadOfficeCountries?: string[] | undefined;
    onTaxSettingsUpdated?: (({ id }: {
        id: string;
    }) => void) | undefined;
} & CommonComponentProps) => JSX.Element;
type ConnectComponentsPayload = {
    connectInstance: connectJs.StripeConnectInstance;
};
declare const ConnectComponentsProvider: ({ connectInstance, children }: {
    connectInstance: connectJs.StripeConnectInstance;
    children: any;
}) => JSX.Element;
declare const useConnectComponents: () => ConnectComponentsPayload;
declare const useCreateComponent: <T extends ConnectElementTagName>(tagName: T) => {
    wrapper: JSX.Element;
    component: ConnectHTMLElementRecord[T] | null;
};
/**
 * @deprecated The method should not be used as we are deprecating the use of attributes directly.
 * Define a setter for your use case and use useUpdateWithSetter instead.
 */
declare const useAttachAttribute: (component: HTMLElement | null, attribute: string, value: string | boolean | undefined) => void;
declare enum ConnectElementEventNames {
    exit = "exit",
    close = "close",
    instantPayoutCreated = "instantpayoutcreated"
}
/**
 * @deprecated The method should not be used as we are deprecating the use of events directly. Define a setter for
 * your use case and use useUpdateWithSetter instead.
 */
declare const useAttachEvent: (component: HTMLElement | null, eventName: ConnectElementEventNames, listener: () => void) => void;
declare const useUpdateWithSetter: <T extends HTMLElement, V extends string | boolean | PaymentsListDefaultFilters | string[] | FetchEphemeralKeyFunction | CollectionOptions | (() => void) | ((notificationCount: NotificationCount) => void) | ((loaderStart: LoaderStart) => void) | ((loaderError: LoadError) => void) | ((stepChange: StepChange) => void) | (({ id }: {
    id: string;
}) => void) | undefined>(component: T | null, value: V, onUpdated: (component: T, value: V) => void) => void;
export { CommonComponentProps, ConnectPayments, ConnectPayouts, ConnectPaymentDetails, ConnectPaymentDisputes, ConnectDisputesList, CollectionOptions, ConnectAccountOnboarding, ConnectAccountManagement, ConnectNotificationBanner, ConnectIssuingCard, ConnectIssuingCardsList, ConnectFinancialAccount, ConnectFinancialAccountTransactions, ConnectDocuments, ConnectPayoutsList, ConnectBalances, ConnectTaxRegistrations, ConnectTaxSettings, ConnectComponentsProvider, useConnectComponents, useCreateComponent, useAttachAttribute, ConnectElementEventNames, useAttachEvent, useUpdateWithSetter };
